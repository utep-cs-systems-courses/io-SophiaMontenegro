#include <msp430.h>
#include "libTimer.h"


#define LED_RED BIT6  //switched bits             // P1.0
#define LED_GREEN BIT0             // P1.6
#define LEDS (BIT0 | BIT6)

#define SW1 BIT3		/* switch1 is p1.3 */
#define SWITCHES SW1		/* only 1 switch on this board */

void switch_init() {
  P1REN |= SWITCHES;/* enables resistors for switches */
  P1IE |= SWITCHES;/* enable interrupts from switches */
  P1O
void led_init() {
  P1DIR |= LEDS;
  P1OUT &= ~LEDS;/* leds initially off */
}


int main(void){
  switch_init();
  led_init();
  configureClocks();
  enableWDTInterrupts();

  or_sr(0x18);  // CPU off, GIE on
}

static int buttonDown;

void
switch_interrupt_handler(){

  char p1val = P1IN;		/* switch is in P1 */

/* update switch interrupt sense to detect changes from current buttons */
  P1IES |= (p1val & SWITCHES);	/* if switch up, sense down */
  P1IES &= (p1val | ~SWITCHES);	/* if switch down, sense up */

/* up=red, down=green */
  if (p1val & SW1) {
    P1OUT |= LED_RED;
    P1OUT &= ~LED_GREEN;
    buttonDown = 0; //button is up
  } else {
    P1OUT |= LED_GREEN;
    P1OUT &= ~LED_RED;
    buttonDown = 1; //button is down
  }
}


/* Switch on P1 (S2) */
/*void
__interrupt_vec(PORT1_VECTOR) Port_1(){
  if (P1IFG & SWITCHES) {	      /* did a button cause this interrupt? */
/*  P1IFG &= ~SWITCHES;		      /* clear pending sw interrupts */
/*  switch_interrupt_handler();	/* single handler for all switches */
/*}
}
*/
